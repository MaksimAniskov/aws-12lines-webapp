# Â© 2017 Maksim Aniskov MaksimAniskov@gmail.com MIT License

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Outputs:
  ApiGatewayEndpoint:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod
  CognitoClientId:
    Value: !Ref UserPoolClient
  UserPoolId:
    Value: !Ref UserPool

Resources:

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
      Schema:
        - Name: email
          Required: true
      AliasAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref AWS::StackName
      UserPoolId: !Ref UserPool

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        securityDefinitions:
          user-pool-authorizer:
            type: apiKey
            in: header
            name: Authorization
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !Sub ${UserPool.Arn}
        paths:
          "/":
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
              responses: {}
              security:
                - user-pool-authorizer: []
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                type: mock

  Function:
    Type: AWS::Serverless::Function
    FunctionName: !Ref AWS::StackName
    Properties:
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId:
              Ref: Api
      CodeUri: lambda
      Handler: index.handler
      Runtime: nodejs6.10
      MemorySize: 128
      Timeout: 10
